 Linux divides authorization into 2 levels.

1) Ownership:
2) Permission :

Linux File Ownership
Every file and directory on your Unix/Linux system is assigned 3 types of owner, given below.

I) User : 
A user is the owner of the file. By default, the person who created a file becomes its owner. Hence, a user is also sometimes called an owner

II) Group :
A user- group can contain multiple users. All users belonging to a group will have the same Linux group permissions access to the file. Suppose you have a project where a number of people require access to a file. Instead of manually assigning permissions to each user, you could add all users to a group, and assign group permission to file such that only this group members and no one else can read or modify the files.

III) Other :
Any other user who has access to a file. This person has neither created the file, nor he belongs to a usergroup who could own the file. Practically, it means everybody else. Hence, when you set the permission for others, it is also referred as set permissions for the world.


Linux File Permissions
Every file and directory in your UNIX/Linux system has following 3 permissions defined for all the 3 owners discussed above.

Read: This permission give you the authority to open and read a file. Read permission on a directory gives you the ability to lists its content.
Write: The write permission gives you the authority to modify the contents of a file. The write permission on a directory gives you the authority to add, remove and rename files stored in the directory. Consider a scenario where you have to write permission on file but do not have write permission on the directory where the file is stored. You will be able to modify the file contents. But you will not be able to rename, move or remove the file from the directory.
Execute: In Windows, an executable program usually has an extension “.exe” and which you can easily run. In Unix/Linux, you cannot run a program unless the execute permission is set. If the execute permission is not set, you might still be able to see/modify the program code(provided read & write permissions are set), but not run it.

Here, we have highlighted ‘-rw-rw-r–‘and this weird looking code is the one that tells us about the Unix permissions given to the owner, user group and the world.
Here, the first ‘–‘ implies that we have selected a file

Else, if it were a directory, d would have been shown.
'drwxr-xr-x'

The characters are pretty easy to remember.

r = read permission
w = write permission
x = execute permission
– = no permission

Changing file/directory permissions in Linux Using ‘chmod’ command :-

we can use the ‘chmod’ command which stands for ‘change mode’. Using the command, we can set permissions (read, write, execute) on a file/directory for the owner, group and the world.

Syntax:
chmod permissions filename

There are 2 ways to use the command –
1) Absolute mode :
2) Symbolic mode :

1) Absolute(Numeric) Mode in Linux : 
In this mode, file permissions are not represented as characters but a three-digit octal number.
The table below gives numbers for all for permissions types.

Number	   Permission Type	  Symbol
0      	   No Permission	        —
1	         Execute	             –x
2	         Write	               -w-
3	         Execute + Write	     -wx
4	         Read	                  r–
5	         Read + Execute	        r-x
6	         Read +Write	          rw-
7	         Read + Write +Execute	rwx


2) Symbolic Mode in Linux :
In the Absolute mode, you change permissions for all 3 owners. In the symbolic mode, you can modify permissions of a specific owner. It makes use of mathematical symbols to modify the Unix file permissions.

Operator	Description
+         Adds a permission to a file or directory
–         Removes the permission
=         Sets the permission and overrides the permissions set earlier.


The various owners are represented as –
User Denotations    

u          user/owner
g          group
o          other
a          all

For ex : 
setting permission to other user
chmod o=rwx sample.py

adding execute permission to user group
chmod g+x sample.py

Removing the read permission for user 
chmod u-r sample.py

2 ) Changing Ownership and Group in Linux
For changing the ownership of a file/directory, you can use the following command:
chown user filename

chown user filename
In case you want to change the user as well as group for a file or directory use the command
chown user:group filename












